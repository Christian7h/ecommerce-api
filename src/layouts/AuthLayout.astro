---
import '../styles/global.css';

interface Props {
  requireAuth?: boolean;
  requireAdmin?: boolean;
  title?: string;
}

const { title = 'E-Commerce' } = Astro.props;

// Obtener el token
const token = Astro.cookies.get('token')?.value;

// Si no hay token, redirigir a login
if (!token) {
  return Astro.redirect('/login');
}
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <script is:inline>
      // Función para limpiar datos de autenticación
      function clearAuthData() {
        document.cookie = "token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        localStorage.clear();
        window.location.href = '/login';
      }

      // Verificar token periódicamente
      async function verifyToken() {
        try {
          const token = document.cookie
            .split("; ")
            .find((row) => row.startsWith("token="))
            ?.split("=")[1];

          if (!token) {
            clearAuthData();
            return;
          }

          const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/auth/verify`, {
            headers: { Authorization: `Bearer ${token}` }
          });

          if (!response.ok) {
            clearAuthData();
            return;
          }
        } catch (error) {
          console.error('Error verificando token:', error);
          clearAuthData();
        }
      }

      // Verificar token cada 30 segundos
      setInterval(verifyToken, 30000);

      // Interceptar todas las respuestas fetch para manejar 401
      const originalFetch = window.fetch;
      window.fetch = async function(...args) {
        try {
          const response = await originalFetch.apply(this, args);
          if (response.status === 401) {
            clearAuthData();
          }
          return response;
        } catch (error) {
          if (error?.status === 401 || 
              (error?.message && error.message.includes('401'))) {
            clearAuthData();
          }
          throw error;
        }
      };
    </script>
  </head>
  <body>
    <slot />
  </body>
</html> 